// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	shorterFieldNames          = builder.RawFieldNames(&Shorter{})
	shorterRows                = strings.Join(shorterFieldNames, ",")
	shorterRowsExpectAutoSet   = strings.Join(stringx.Remove(shorterFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	shorterRowsWithPlaceHolder = strings.Join(stringx.Remove(shorterFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheShorterDbShorterIdPrefix        = "cache:shorterDb:shorter:id:"
	cacheShorterDbShorterRawUrlPrefix    = "cache:shorterDb:shorter:rawUrl:"
	cacheShorterDbShorterShortCodePrefix = "cache:shorterDb:shorter:shortCode:"
)

type (
	shorterModel interface {
		Insert(ctx context.Context, data *Shorter) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Shorter, error)
		FindOneByRawUrl(ctx context.Context, rawUrl string) (*Shorter, error)
		FindOneByShortCode(ctx context.Context, shortCode sql.NullString) (*Shorter, error)
		Update(ctx context.Context, data *Shorter) error
		Delete(ctx context.Context, id int64) error
	}

	defaultShorterModel struct {
		sqlc.CachedConn
		table string
	}

	Shorter struct {
		Id        int64          `db:"id"`
		CreatedAt time.Time      `db:"created_at"`
		RawUrl    string         `db:"raw_url"`
		ShortCode sql.NullString `db:"short_code"`
	}
)

func newShorterModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultShorterModel {
	return &defaultShorterModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`shorter`",
	}
}

func (m *defaultShorterModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	shorterDbShorterIdKey := fmt.Sprintf("%s%v", cacheShorterDbShorterIdPrefix, id)
	shorterDbShorterRawUrlKey := fmt.Sprintf("%s%v", cacheShorterDbShorterRawUrlPrefix, data.RawUrl)
	shorterDbShorterShortCodeKey := fmt.Sprintf("%s%v", cacheShorterDbShorterShortCodePrefix, data.ShortCode)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, shorterDbShorterIdKey, shorterDbShorterRawUrlKey, shorterDbShorterShortCodeKey)
	return err
}

func (m *defaultShorterModel) FindOne(ctx context.Context, id int64) (*Shorter, error) {
	shorterDbShorterIdKey := fmt.Sprintf("%s%v", cacheShorterDbShorterIdPrefix, id)
	var resp Shorter
	err := m.QueryRowCtx(ctx, &resp, shorterDbShorterIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shorterRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShorterModel) FindOneByRawUrl(ctx context.Context, rawUrl string) (*Shorter, error) {
	shorterDbShorterRawUrlKey := fmt.Sprintf("%s%v", cacheShorterDbShorterRawUrlPrefix, rawUrl)
	var resp Shorter
	err := m.QueryRowIndexCtx(ctx, &resp, shorterDbShorterRawUrlKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `raw_url` = ? limit 1", shorterRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, rawUrl); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShorterModel) FindOneByShortCode(ctx context.Context, shortCode sql.NullString) (*Shorter, error) {
	shorterDbShorterShortCodeKey := fmt.Sprintf("%s%v", cacheShorterDbShorterShortCodePrefix, shortCode)
	var resp Shorter
	err := m.QueryRowIndexCtx(ctx, &resp, shorterDbShorterShortCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `short_code` = ? limit 1", shorterRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, shortCode); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShorterModel) Insert(ctx context.Context, data *Shorter) (sql.Result, error) {
	shorterDbShorterIdKey := fmt.Sprintf("%s%v", cacheShorterDbShorterIdPrefix, data.Id)
	shorterDbShorterRawUrlKey := fmt.Sprintf("%s%v", cacheShorterDbShorterRawUrlPrefix, data.RawUrl)
	shorterDbShorterShortCodeKey := fmt.Sprintf("%s%v", cacheShorterDbShorterShortCodePrefix, data.ShortCode)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, shorterRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RawUrl, data.ShortCode)
	}, shorterDbShorterIdKey, shorterDbShorterRawUrlKey, shorterDbShorterShortCodeKey)
	return ret, err
}

func (m *defaultShorterModel) Update(ctx context.Context, newData *Shorter) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	shorterDbShorterIdKey := fmt.Sprintf("%s%v", cacheShorterDbShorterIdPrefix, data.Id)
	shorterDbShorterRawUrlKey := fmt.Sprintf("%s%v", cacheShorterDbShorterRawUrlPrefix, data.RawUrl)
	shorterDbShorterShortCodeKey := fmt.Sprintf("%s%v", cacheShorterDbShorterShortCodePrefix, data.ShortCode)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, shorterRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.RawUrl, newData.ShortCode, newData.Id)
	}, shorterDbShorterIdKey, shorterDbShorterRawUrlKey, shorterDbShorterShortCodeKey)
	return err
}

func (m *defaultShorterModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheShorterDbShorterIdPrefix, primary)
}

func (m *defaultShorterModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shorterRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultShorterModel) tableName() string {
	return m.table
}
